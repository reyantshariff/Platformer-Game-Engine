package oogasalad.model.engine.base.architecture;

import static oogasalad.model.config.GameConfig.LOGGER;

import com.fasterxml.jackson.databind.JsonNode;
import java.util.Map;
import java.util.function.Function;
import oogasalad.model.engine.base.enumerate.ComponentTag;
import oogasalad.model.engine.base.serialization.Serializable;
import oogasalad.model.engine.base.serialization.SerializedField;
/**
 * The GameComponent class is the base class for all game components. It is used to define the
 * behavior of game objects. Each game object can have multiple components, and each component can
 * have its own logic and behavior.
 *
 * @author Hsuan-Kai Liao, Christian Bepler
 */
public abstract class GameComponent implements Serializable {
  private GameObject parent;

  private static final Map<String, Function<JsonNode, Object>> FIELD_TYPE_EXTRACTORS = Map.of(
      "int", JsonNode::asInt,
      "Integer", JsonNode::asInt,
      "double", JsonNode::asDouble,
      "Double", JsonNode::asDouble,
      "boolean", JsonNode::asBoolean,
      "Boolean", JsonNode::asBoolean,
      "String", JsonNode::asText
  );

  /**
   * This method is called after all objects have been created and initialized. It is used to set up
   * references to other objects and components. If an object is made mid-game, this method is called
   * right after the constructor.
   * NOTE: This method should be override if needed.
   */
  protected void awake() {}

  /**
   * This method is called before the object calls its update method for the first time
   * NOTE: This method should be override if needed.
   */
  protected void start() {}

  /**
   * This method is called when the component is removed.
   * NOTE: This method should be override if needed.
   */
  public void onRemove() {}

  /**
   * This method is called every frame. It is used to update the object and perform any necessary
   * game logic.
   * NOTE: This method should be override if needed.
   * @param deltaTime The time since the last frame, in seconds.
   */
  protected void update(double deltaTime) {}

  /**
   * Get the component based on
   *
   * @param componentClass the component class specified
   * @return the component instance
   */
  public final <T extends GameComponent> T getComponent(Class<T> componentClass) {
    if (parent != null) {
      return parent.getComponent(componentClass);
    }

    LOGGER.error(this.getClass().getSimpleName() + " has no parent");
    throw new IllegalArgumentException("Parent gameObject not exist!");
  }

  /**
   * This is the actual updating order of the component.
   * NOTE: This method MUST be override.
   * @return the specified component tag
   */
  public abstract ComponentTag componentTag();

  /**
   * Get the parent gameObject of the component
   */
  public final GameObject getParent() {
    return parent;
  }

  /**
   * Set the parent gameObject of the component
   */
  final void setParent(GameObject parent) {
    this.parent = parent;
  }

  /**
   * Change the scene to the specified scene name.
   * @param sceneName the name of the scene to be changed to
   */
  public final void changeScene(String sceneName) {
    parent.changeScene(sceneName);
  }

  /* TODO: MOVE THE BOTTOM CODE IN THE PARSER */

  /**
   * This sets the fields if they are annotated -- used especially for loading Json files
   * This code was generated by ChatGPT
   *
   * @param config - the Json node that has the configuration pairs
   */
  public void initializeFromJson(JsonNode config) {
    if (config == null || config.isNull()) return;

    for (SerializedField serializedField : getSerializedFields()) {
      setFieldFromConfig(config, serializedField);
    }
  }

  private void setFieldFromConfig(JsonNode config, SerializedField serializedField) {
    String fieldName = serializedField.getFieldName();

    if (!config.has(fieldName))
      return;
    JsonNode valueNode = config.get(fieldName);
    Class<?> fieldType = serializedField.getFieldType();

    try {
      Object value = extractFieldValue(fieldType, valueNode);

      SerializedField typedField = serializedField;
      typedField.setValue(value);

    } catch (IllegalArgumentException | ClassCastException e) {
      throw new IllegalStateException("Failed to set field '" + fieldName + "' with value: " + valueNode, e);
    }
  }

  private Object extractFieldValue(Class<?> fieldType, JsonNode valueNode) {
    Function<JsonNode, Object> extractor = FIELD_TYPE_EXTRACTORS.get(fieldType.getSimpleName());
    if (extractor == null) {
        LOGGER.error("Unsupported field type: " + fieldType.getSimpleName());
        throw new IllegalArgumentException("Unsupported field type: " + fieldType);
    }
    return extractor.apply(valueNode);
  }
}
